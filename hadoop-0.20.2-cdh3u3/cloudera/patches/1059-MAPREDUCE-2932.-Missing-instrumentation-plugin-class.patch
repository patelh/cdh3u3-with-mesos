From ba8f83f3ff5877e2f4039dc0c02cb26fc4f45852 Mon Sep 17 00:00:00 2001
From: Harsh J <harsh@cloudera.com>
Date: Fri, 23 Sep 2011 17:19:58 +0530
Subject: [PATCH 1059/1117] MAPREDUCE-2932. Missing instrumentation plugin class shouldn't crash the TT startup

Missing instrumentation plugin class shouldn't crash the TT startup per
design, and should fallback to default instead.
Reason: Improvement
Author: Harsh J
Ref: CDH-3533
---
 .../org/apache/hadoop/mapred/TaskTracker.java      |    6 +-
 .../mapred/TestTaskTrackerInstrumentation.java     |  104 ++++++++++++++++++++
 2 files changed, 108 insertions(+), 2 deletions(-)
 create mode 100644 src/test/org/apache/hadoop/mapred/TestTaskTrackerInstrumentation.java

diff --git a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
index 009ec4d..1d8ccc4 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
@@ -757,15 +757,17 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     //tweak the probe sample size (make it a function of numCopiers)
     probe_sample_size = this.fConf.getInt("mapred.tasktracker.events.batchsize", 500);
     
-    Class<? extends TaskTrackerInstrumentation> metricsInst = getInstrumentationClass(fConf);
     try {
+      Class<? extends TaskTrackerInstrumentation> metricsInst = getInstrumentationClass(fConf);
       java.lang.reflect.Constructor<? extends TaskTrackerInstrumentation> c =
         metricsInst.getConstructor(new Class[] {TaskTracker.class} );
       this.myInstrumentation = c.newInstance(this);
     } catch(Exception e) {
       //Reflection can throw lots of exceptions -- handle them all by 
       //falling back on the default.
-      LOG.error("failed to initialize taskTracker metrics", e);
+      LOG.error(
+        "Failed to initialize taskTracker metrics. Falling back to default.",
+        e);
       this.myInstrumentation = new TaskTrackerMetricsInst(this);
     }
     
diff --git a/src/test/org/apache/hadoop/mapred/TestTaskTrackerInstrumentation.java b/src/test/org/apache/hadoop/mapred/TestTaskTrackerInstrumentation.java
new file mode 100644
index 0000000..dcd15c1
--- /dev/null
+++ b/src/test/org/apache/hadoop/mapred/TestTaskTrackerInstrumentation.java
@@ -0,0 +1,104 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.mapred;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.hadoop.examples.SleepJob;
+import org.junit.Test;
+
+public class TestTaskTrackerInstrumentation {
+
+  @Test
+  public void testStartup() throws IOException {
+    MiniMRCluster mr = null;
+    try {
+      JobConf jtConf = new JobConf();
+      // Set a bad class.
+      jtConf.set("mapred.tasktracker.instrumentation",
+          "org.nowhere.FUBAR");
+      mr = new MiniMRCluster(1, "file:///", 1, null, null, jtConf);
+      // Assert that the TT fell back to default class.
+      assertEquals(TaskTrackerMetricsInst.class,
+          mr.getTaskTrackerRunner(0).getTaskTracker()
+          .getTaskTrackerInstrumentation().getClass());
+    } finally {
+      mr.shutdown();
+    }
+  }
+
+  @Test
+  public void testSlots() throws IOException {
+    MiniMRCluster mr = null;
+    try {
+      JobConf jtConf = new JobConf();
+      jtConf.set("mapred.tasktracker.instrumentation",
+          MyTaskTrackerMetricsInst.class.getName());
+      mr = new MiniMRCluster(1, "file:///", 1, null, null, jtConf);
+      MyTaskTrackerMetricsInst instr = (MyTaskTrackerMetricsInst)
+        mr.getTaskTrackerRunner(0).getTaskTracker()
+        .getTaskTrackerInstrumentation();
+
+      JobConf conf = mr.createJobConf();
+      SleepJob job = new SleepJob();
+      job.setConf(conf);
+      int numMapTasks = 3;
+      int numReduceTasks = 2;
+      job.run(numMapTasks, numReduceTasks, 1, 1, 1, 1);
+
+      synchronized (instr) {
+        // 5 regular tasks + 2 setup/cleanup tasks.
+        assertEquals(7, instr.complete);
+        assertEquals(7, instr.end);
+        assertEquals(7, instr.launch);
+      }
+    } finally {
+      if (mr != null) {
+        mr.shutdown();
+      }
+    }
+  }
+
+  static class MyTaskTrackerMetricsInst extends TaskTrackerInstrumentation  {
+    public int complete = 0;
+    public int launch = 0;
+    public int end = 0;
+
+    public MyTaskTrackerMetricsInst(TaskTracker tracker) {
+      super(tracker);
+    }
+
+    @Override
+    public void completeTask(TaskAttemptID t) {
+      this.complete++;
+    }
+
+    @Override
+    public void reportTaskLaunch(TaskAttemptID t, File stdout, File stderr) {
+      this.launch++;
+    }
+
+    @Override
+    public void reportTaskEnd(TaskAttemptID t) {
+      this.end++;
+    }
+  }
+}
-- 
1.7.0.4

